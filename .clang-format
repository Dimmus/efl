# Configuration of clang-format
# =============================
# Tested to work with version: 16.
#
# Introduction: https://clang.llvm.org/docs/ClangFormat.html
# Supported options: https://clang.llvm.org/docs/ClangFormatStyleOptions.html

# See https://wiki.apertis.org/Guidelines/Coding_conventions#Code_formatting
BasedOnStyle: GNU

Language: Cpp
Standard: Latest

# Line width (don't exceed 100).
ColumnLimit: 80

# Never use tabs for indentation.
# Note: TabWidth and IndentWidth must be the same, or strange things happen.
UseTab: Never
TabWidth: 4
IndentWidth: 4

PPIndentWidth: 2
ContinuationIndentWidth: 4

LineEnding: LF
InsertNewlineAtEOF: true
KeepEmptyLinesAtTheStartOfBlocks: false
MaxEmptyLinesToKeep: 1

# For switch statements, don't indent the cases.
IndentCaseLabels: true
IndentCaseBlocks: true
IndentGotoLabels: false
IndentPPDirectives: AfterHash
IndentWrappedFunctionNames: false

# Make access modifier slightly more visible.
# AccessModifierOffset: -1

# This causes parameters on continuations to align to the opening brace.
#
#   like_this_long_name(parameter_one,
#                       parameter_two,
#                       parameter_three);
#
AlignAfterOpenBracket: Align

AlignArrayOfStructures: Right
AlignEscapedNewlines: Left
AlignOperands: Align
AlignConsecutiveAssignments:
    Enabled:          true
    AcrossEmptyLines: false
    AcrossComments:   false
    AlignCompound:    false
    PadOperators:     false
AlignConsecutiveBitFields:
    Enabled:          true
    AcrossEmptyLines: false
    AcrossComments:   false
AlignConsecutiveDeclarations:
    Enabled:          true
    AcrossEmptyLines: false
    AcrossComments:   false
AlignConsecutiveMacros:
    Enabled:          true
    AcrossEmptyLines: false
    AcrossComments:   false
AlignTrailingComments:
    Kind:           Leave
    OverEmptyLines: 0

# These two settings trigger stacking of parameters in most cases; this is
# easier to read and also makes diffs easier to read (since an added or removed
# parameter is obvious). For example, function calls will look like this:
#
#   like_this_long_name(parameter_one,
#                       parameter_two,
#                       parameter_three,
#                       parameter_four,
#                       parameter_five,
#                       parameter_six);
#
# Instead of:
#
#   like_this_long_name(parameter_one, parameter_two, parameter_three, parameter_four,
#                       parameter_five, parameter_six);
#
BinPackArguments: false
BinPackParameters: false

AllowAllArgumentsOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false

# Disallow short functions on one line; break them up.
AllowShortBlocksOnASingleLine: Never

AllowShortCaseLabelsOnASingleLine: false
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
AllowShortLoopsOnASingleLine: false

# Always break:
#
#   const char *foo = "multi"
#                     "line";
#
# Instead of:
#
#   const char *foo =
#       "multi"
#       "line";
#
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false

# This tries to match EFL's style as much as possible.
BreakBeforeBraces: Custom
BraceWrapping:
    AfterCaseLabel:        true
    AfterControlStatement: true
    AfterEnum:             true
    AfterExternBlock:      false
    AfterFunction:         true
    AfterStruct:           true
    AfterUnion:            false
    BeforeElse:            true
    BeforeWhile:           true
    IndentBraces:          false
    SplitEmptyFunction:    false
    SplitEmptyRecord:      false
BreakAfterAttributes: Never
BreakBeforeBinaryOperators: None
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTernaryOperators: true

DerivePointerAlignment: false
PointerAlignment: Right

QualifierAlignment: Custom
QualifierOrder: ["static", "inline", "volatile", "restrict", "const", "type"]

ReflowComments: false
BreakStringLiterals: true
RemoveSemicolon: true
# RemoveParentheses: ReturnStatement # no in clang-fromat 16
InsertBraces: false
SeparateDefinitionBlocks: Always

SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false

# Use "if (...)" instead of "if(...)", but have function calls like foo().
SpaceBeforeParens: ControlStatements
SpaceInEmptyParentheses: false

BitFieldColonSpacing: Both
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false

# Use two spaces before trailing comments, for example
#
#   foo = bar;  // comment
#
# Note that this doesn't work for C-style comments.
SpacesBeforeTrailingComments: 2

SpacesInSquareBrackets: false
SpacesInLineCommentPrefix:
    Minimum: 1
    Maximum: -1

# SortIncludes: Never
# IncludeBlocks: Preserve
# IncludeIsMainRegex: ""
# IncludeCategories:
#     - {Regex: "<.*>",   Priority: -2, CaseSensitive: true}
#     - {Regex: "\".*\"", Priority: -1, CaseSensitive: true}

# AttributeMacros: ["__capability"]
# StatementAttributeLikeMacros: []
# StatementMacros: []

# Avoid having function calls broken onto a new line:
#
#   int a = foo(
#       long, list, of, many, params);
#
# Instead of:
#
#   int a =
#       foo(long, list, of, many, params);
#
# PenaltyBreakAssignment: 200

# PenaltyBreakBeforeFirstCallParameter: 19
# PenaltyBreakComment: 300
# PenaltyBreakFirstLessLess: 120
# PenaltyBreakOpenParenthesis: 0

# We don't want literal strings to break,
# however clang-format seems to ignore this (sigh).
# PenaltyBreakString: 1000000

# PenaltyExcessCharacter: 10
# PenaltyIndentedWhitespace: 0
# PenaltyReturnTypeOnItsOwnLine: 60
